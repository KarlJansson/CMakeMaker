#include "precomp.h"

#include "common_writer.h"

const std::vector<std::string> CommonWriter::configs_ = {
    "Release", "Debug", "MinSizeRel", "RelWithDebInfo"};
const std::vector<std::string> CommonWriter::extensions_ = {"cc", "cpp", "h",
                                                            "cu", "cuh", "qml"};
const std::string CommonWriter::cmake_header_ =
    "########### CMakeMaker autogenerated file ###########\n"
    "cmake_minimum_required(VERSION 3.6)\n";

void CommonWriter::UpdateIfDifferent(std::string file_path,
                                     std::string &expected) {
  bool update = true;
  std::string check_str;
  if (std::filesystem::exists(file_path)) {
    std::ifstream main_check(file_path, std::ios::binary);

    main_check.seekg(0, std::ios::end);
    check_str.assign(main_check.tellg(), ' ');
    main_check.seekg(0, std::ios::beg);
    main_check.read(&check_str[0], check_str.size());
    main_check.close();

    // Remove windows style endline crap
    check_str.erase(std::remove(check_str.begin(), check_str.end(), '\r'),
                    check_str.end());

    if (expected.size() == check_str.size())
      if (expected.compare(check_str) == 0) update = false;
  }

  if (update) {
    std::ofstream open(file_path);
    open << expected;
    open.close();
  }
}

void CommonWriter::AddMakeDirCommand(std::string dir_path, std::string base_dir,
                                     bool config_inc, std::string &expected) {
  expected +=
      "  COMMAND ${CMAKE_COMMAND} ARGS -E make_directory\n"
      "    \"";
  for (auto &conf : configs_)
    expected += "$<$<CONFIG:" + conf + ">:" + base_dir +
                (config_inc ? conf : "") + dir_path.substr(1, dir_path.size()) +
                "/>";
  expected += "\"\n";
}

void CommonWriter::AddCopyCommand(std::string file_path,
                                  std::string debug_suffix, std::string ext,
                                  std::string source_base,
                                  std::string dest_base, bool config_inc,
                                  std::string &expected) {
  expected +=
      "  COMMAND ${CMAKE_COMMAND} ARGS -E copy_if_different\n"
      "    \"";
  for (auto &conf : configs_)
    expected += "$<$<CONFIG:" + conf + ">:" + source_base + file_path +
                (conf.compare("Debug") == 0 ? debug_suffix : "") + ext + ">";
  expected += "\"\n    \"";
  for (auto &conf : configs_)
    expected += "$<$<CONFIG:" + conf + ">:" + dest_base +
                (config_inc ? conf : "") + file_path +
                (conf.compare("Debug") == 0 ? debug_suffix : "") + ext + ">";
  expected += "\"\n";
}

void CommonWriter::WriteSourceGroups(RepoSearcher::directory &dir,
                                     std::string &expected) {
  for (auto &d : dir.directories) {
    if (d.substr(0, 2).compare("./") != 0) continue;
    auto group_name = d.substr(d.find_first_of('/') + 1, d.size());

    if (group_name.find('/') != std::string::npos) {
      std::vector<std::string> dir_names;
      while (group_name.find('/') != std::string::npos) {
        dir_names.push_back(
            group_name.substr(0, group_name.find_first_of('/')));
        group_name = group_name.substr(group_name.find_first_of('/') + 1,
                                       group_name.size());
      }
      dir_names.push_back(group_name);

      group_name = "";
      for (size_t i = 0; i < dir_names.size(); ++i)
        group_name += dir_names[i] + (i != dir_names.size() - 1 ? "/" : "");
    }

    expected += "source_group(" + group_name + " FILES\n";
    for (auto &ext : CommonWriter::extensions_)
      for (auto &file : dir.files[ext].fmap)
        if (file.first.compare(d) == 0)
          for (auto &pair : file.second) expected += "  " + pair + "\n";
    expected += ")\n\n";
  }
}
