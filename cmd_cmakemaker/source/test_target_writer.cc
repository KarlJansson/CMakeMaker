#include "test_target_writer.h"
#include <fstream>

void TestTargetWriter::WriteTestTraget(
    std::string dir_name,
    std::map<std::string, RepoSearcher::directory>& targets,
    std::map<std::string, RepoSearcher::library>& libraries) {
  std::ofstream open(dir_name + "/CMakeLists.txt");
  std::string proj_name =
      dir_name.substr(dir_name.find_last_of('/') + 1, dir_name.size());
  proj_name = dir_name.substr(dir_name.find_first_of('_') + 1, dir_name.size());

  std::string std_includes =
      "#include <memory>\n"
      "#include <string>\n"
      "#include <vector>\n"
      "#include <array>\n"
      "#include <set>\n"
      "#include <unordered_set>\n"
      "#include <map>\n"
      "#include <unordered_map>\n"
      "#include <fstream>\n"
      "#include <sstream>\n"
      "#include <iostream>\n"
      "#include <algorithm>\n"
      "#include <chrono>\n"
      "#include <random>\n"
      "#include <iterator>\n"
      "#include <locale>\n"
      "#include <atomic>\n"
      "#include <mutex>\n"
      "#include <future>\n"
      "#include <condition_variable>\n"
      "#include <complex>\n"
      "#include <numeric>\n\n";

  std::vector<std::string> exts = {"cc", "cpp"};
  std::vector<std::string> configs = {"Release", "Debug", "MinSizeRel",
                                      "RelWithDebInfo"};

  std::ofstream test_main(dir_name + "/test_main.cc");

  test_main << "#define DLLExport\n\n";
  test_main << "#include <gtest/gtest.h>\n\n" << std_includes;
  for (auto& dir : targets)
    for (auto& obj_dir : dir.second.files["h"].fmap)
      for (auto& obj : obj_dir.second)
        if (obj.find("test_") != std::string::npos)
          test_main << "#include \"" +
                           obj.substr(obj.find_last_of('/') + 1, obj.size()) +
                           "\"\n";

  test_main << "\nint main(int argc, char** args) {\n"
            << "  ::testing::InitGoogleTest(&argc, args);\n"
            << "  return RUN_ALL_TESTS();\n"
            << "}";

  test_main.close();

  open << "########### CMakeMaker autogenerated file ###########" << std::endl;
  open << "cmake_minimum_required(VERSION 3.0)" << std::endl << std::endl;

  open << "find_package(GTest)\n";
  for (auto& dir : targets) {
    for (auto& lib : dir.second.libraries) {
      auto& lib_info = libraries[lib];
      if (!lib_info.find_command.empty()) {
        open << "find_package(" << libraries[lib].find_command;
        if (!lib_info.components.empty()) {
          open << " COMPONENTS" << std::endl;
          for (auto& mod : lib_info.components)
            open << "  " << mod << std::endl;
        }
        open << ")\n";
      }
    }
  }

  open << "\nset(cpp_files" << std::endl;
  open << "  test_main.cc" << std::endl;
  open << ")" << std::endl << std::endl;

  open << "add_executable(" << proj_name << " ${cpp_files})\n\n";

  std::set<std::string> include_dirs;
  for (auto& dir : targets) {
    for (auto& d : dir.second.directories)
      if (!d.empty())
        include_dirs.insert("." + dir.first + d.substr(1, d.size()));
    for (auto& d : dir.second.include_dirs)
      if (!d.empty()) include_dirs.insert(d);
    for (auto& lib : dir.second.libraries)
      if (!libraries[lib].include_dir.empty())
        include_dirs.insert(libraries[lib].include_dir);
  }
  include_dirs.insert("${GTEST_INCLUDE_DIRS}");

  open << "include_directories(" << proj_name << std::endl;
  for (auto& include : include_dirs) open << "  " << include << std::endl;
  open << ")" << std::endl << std::endl;

  std::set<std::string> link_libraries;
  for (auto& dir : targets) {
    std::string dir_n =
        dir.first.substr(dir.first.find_last_of('/') + 1, dir.first.size());

    for (auto& lib : dir.second.libraries)
      link_libraries.insert(libraries[lib].lib_dir);
    for (auto& ext : exts) {
      for (auto& obj_dir : dir.second.files[ext].fmap) {
        for (auto& obj : obj_dir.second) {
          if (obj.find("main.") != std::string::npos) continue;
          std::string obj_file_str =
              "${CMAKE_CURRENT_BINARY_DIR}/../" + dir_n + "/" +
              dir_n.substr(dir_n.find_first_of('_') + 1, dir_n.size()) +
              ".dir/";
          for (auto& conf : configs)
            obj_file_str += "$<$<CONFIG:" + conf + ">:" + conf + ">";
          obj_file_str +=
              "/" +
              obj.substr(obj.find_last_of('/') + 1,
                         obj.find_last_of('.') - obj.find_last_of('/')) +
              "obj";

          link_libraries.insert(obj_file_str);
        }
      }
    }

    for (auto& obj : dir.second.moc_files) {
      if (obj.find("main.") != std::string::npos) continue;
      std::string obj_file_str =
          "${CMAKE_CURRENT_BINARY_DIR}/../" + dir_n + "/" +
          dir_n.substr(dir_n.find_first_of('_') + 1, dir_n.size()) + ".dir/";
      for (auto& conf : configs)
        obj_file_str += "$<$<CONFIG:" + conf + ">:" + conf + ">";
      obj_file_str +=
          "/moc_" +
          obj.substr(obj.find_last_of('/') + 1,
                     obj.find_last_of('.') - obj.find_last_of('/')) +
          "obj";

      link_libraries.insert(obj_file_str);
    }
  }
  link_libraries.insert("${GTEST_LIBRARIES}");

  open << "target_link_libraries(" << proj_name << std::endl;
  for (auto& lib : link_libraries) open << "  " << lib << std::endl;
  open << ")" << std::endl << std::endl;

  for (auto& dir : targets) {
    std::set<std::string> libs;
    for (auto& dep : dir.second.dependencies)
      for (auto& lib : targets["./" + dep].libraries)
        if (!libraries[lib].dll_file.empty()) libs.insert(lib);

    for (auto& lib : dir.second.libraries)
      if (!libraries[lib].dll_file.empty()) libs.insert(lib);

    if (!libs.empty())
      open << "add_custom_command(TARGET " + proj_name + " POST_BUILD\n";
    for (auto& lib : libs) {
      open << "  COMMAND ${CMAKE_COMMAND} ARGS -E copy_if_different\n";
      open << "    \"";
      for (auto& conf : configs)
        open << "$<$<CONFIG:" + conf + ">:" + libraries[lib].dll_file +
                    (conf.compare("Debug") == 0 ? libraries[lib].debug_suffix
                                                : "") +
                    ".dll>";
      open << "\"\n    \"";
      for (auto& conf : configs)
        open << "$<$<CONFIG:" + conf +
                    ">:${CMAKE_CURRENT_BINARY_DIR}/Build_Output/bin/" + conf +
                    "/" +
                    libraries[lib].dll_file.substr(
                        libraries[lib].dll_file.find_last_of('/') + 1,
                        libraries[lib].dll_file.size()) +
                    (conf.compare("Debug") == 0 ? libraries[lib].debug_suffix
                                                : "") +
                    ".dll>";
      open << "\"\n";
    }
    if (!libs.empty()) open << ")\n\n";
  }

  open << "add_dependencies(" + proj_name;
  for (auto& dir : targets) {
    std::string dir_n =
        dir.first.substr(dir.first.find_last_of('/') + 1, dir.first.size());
    dir_n = dir_n.substr(dir_n.find_first_of('_') + 1, dir_n.size());
    open << " " << dir_n;
  }
  open << ")";
}
